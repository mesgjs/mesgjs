{
  "version": 3,
  "sources": ["../../src/runtime/js-promise.esm.js"],
  "sourcesContent": ["/*\n * Mesgjs @promise interface - JS Promise wrapper\n * (Implements Promise-like API, but is NOT a JS Promise wrapper interface)\n *\n * Authors: Brian Katzung <briank@kappacs.com> and ChatGPT\n * Copyright 2025 by Kappa Computer Solutions, LLC and Brian Katzung\n */\n\n/*\nCan reject in the original promise task, but queues the handler call (it\ndoesn't require the handler yet).\nIt returns.\nHandlers can be added in a chain after the new Promise.\nIn the reject dispatch, checks for no reject handler.\n*/\n\nimport { getInstance, getInterface, setRO } from './runtime.esm.js';\nimport { NANOS } from './vendor.esm.js';\n\nconst identity = x => x, thrower = x => { throw x; };\nconst callable = f => typeof f === 'function' && (!f.msjsType || f.msjsType === '@code' || f.msjsType === '@function');\nconst thenable = o => typeof o?.then === 'function';\nconst privKey = Symbol();\nconst dualStatus = status => Object.assign(new NANOS(status), status);\n\nfunction arrayFrom (value) {\n\t// Pass arrays through as-is\n\tif (Array.isArray(value)) {\n\t\treturn value;\n\t}\n\t// Flatten iterables and generators\n\tif (typeof value?.[Symbol.iterator] === 'function' || typeof value?.next === 'function') {\n\t\treturn Array.from(value);\n\t}\n\t// Flatten objects with a values method\n\tif (typeof value?.values === 'function') {\n\t\treturn [...value.values()];\n\t}\n}\n\nfunction callHandlers (list) {\n\tconst { state, result } = this[privKey], ok = state === 'fulfilled';\n\tif (!ok && !list.length) {\n\t\tqueueMicrotask(() => Promise.reject(result));\n\t\treturn;\n\t}\n\tfor (const entry of list) {\n\t\tconst [ onResolve, onReject, next ] = entry;\n\t\tqueueMicrotask(() => {\n\t\t\ttry {\n\t\t\t\tconst handler = ok ? onResolve : onReject, mt = handler.msjsType;\n\t\t\t\tif (mt) {\n\t\t\t\t\tconst mp = ok ? { state, resolve: result } : { state, reject: result, message: result?.message };\n\t\t\t\t\t// Note: @function(call) can see the message params; @code(run) cannot!\n\t\t\t\t\tnext.resolve(handler((mt === '@code') ? 'run' : 'call', mp));\n\t\t\t\t}\n\t\t\t\telse next.resolve(handler(result));\n\t\t\t} catch (err) {\n\t\t\t\tnext.reject(err);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst proto = Object.setPrototypeOf({\n\t// Resolve all of a set of promises with an array of their results\n\tall (promises) {\n\t\tif (this[privKey].state !== 'pending') return;\n\t\tpromises = arrayFrom(promises);\n\t\tif (!Array.isArray(promises)) {\n\t\t\tthrow new TypeError('@promise(all) requires an iterable of promises');\n\t\t}\n\t\tconst results = [];\n\t\tlet remaining = promises.length;\n\n\t\tif (!remaining) this.resolve(results);\n\t\tpromises.forEach((p, idx) => {\n\t\t\tp.then(res => {\n\t\t\t\tresults[idx] = res;\n\t\t\t\tif (--remaining === 0) this.resolve(results);\n\t\t\t}, err => this.reject(err));\n\t\t});\n\t\treturn this;\n\t},\n\n\tallSettled (promises) {\n\t\tif (this[privKey].state !== 'pending') return;\n\t\tpromises = arrayFrom(promises);\n\t\tif (!Array.isArray(promises)) {\n\t\t\tthrow new TypeError('@promise(allSettled) requires an iterable of promises');\n\t\t}\n\t\tconst results = [];\n\t\tlet remaining = promises.length;\n\n\t\tif (!remaining) this.resolve(results);\n\t\tpromises.forEach((p, idx) => {\n\t\t\tp.then(value => {\n\t\t\t\tresults[idx] = dualStatus({ status: 'fulfilled', value });\n\t\t\t\tif (--remaining === 0) this.resolve(results);\n\t\t\t}, reason => {\n\t\t\t\tresults[idx] = dualStatus({ status: 'rejected', reason });\n\t\t\t\tif (--remaining === 0) this.resolve(results);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t},\n\n\talways (handler) { return this.then(handler, handler); },\n\n\tany (promises) {\n\t\tif (this[privKey].state !== 'pending') return;\n\t\tpromises = arrayFrom(promises);\n\t\tif (!Array.isArray(promises)) {\n\t\t\tthrow new TypeError('@promise(any) requires an iterable of promises');\n\t\t}\n\t\tconst reasons = [];\n\t\tlet remaining = promises.length;\n\t\tconst allRejected = () => this.reject(new AggregateError(reasons, 'All promises were rejected'));\n\n\t\tif (!remaining) allRejected();\n\t\tpromises.forEach((p, idx) => {\n\t\t\tp.then(res => this.resolve(res), reason => {\n\t\t\t\treasons[idx] = reason;\n\t\t\t\tif (--remaining === 0) allRejected();\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t},\n\n\tcatch (onReject) { return this.then(null, onReject); },\n\n\tget jsv () { return this; },\n\n\tthen (onResolve, onReject) {\n\t\tconst priv = this[privKey];\n\t\tif (!callable(onResolve)) onResolve = identity;\n\t\tif (!callable(onReject)) onReject = thrower;\n\t\tconst entry = [ onResolve, onReject, getInstance('@promise') ];\n\t\tif (priv.handlers) priv.handlers.push(entry);\n\t\telse queueMicrotask(() => callHandlers.call(this, [ entry ]));\n\t\treturn entry[2];\n\t},\n\n\trace (promises) {\n\t\tif (this[privKey].state !== 'pending') return;\n\t\tpromises = arrayFrom(promises);\n\t\tif (!Array.isArray(promises)) {\n\t\t\tthrow new TypeError('@promise(race) requires an iterable of promises');\n\t\t}\n\t\tif (!promises.length) console.warn('@promise empty (race) will never settle!');\n\t\tpromises.forEach(p => p.then(res => this.resolve(res), err => this.reject(err)));\n\t\treturn this;\n\t},\n\n\treject (reason) {\n\t\tconst priv = this[privKey];\n\t\tif (priv.state !== 'pending') return;\n\t\tpriv.state = 'rejected';\n\t\tif (!(reason instanceof Error)) reason = new Error(reason);\n\t\tpriv.result = reason;\n\t\tqueueMicrotask(() => {\n\t\t\tcallHandlers.call(this, priv.handlers);\n\t\t\tpriv.handlers = null;\n\t\t});\n\t},\n\n\tresolve (result) {\n\t\tconst priv = this[privKey];\n\t\tif (priv.state !== 'pending') return;\n\t\tif (thenable(result)) {\n\t\t\tresult.then(res => this.resolve(res), err => this.reject(err));\n\t\t\treturn;\n\t\t}\n\t\tpriv.state = 'fulfilled';\n\t\tpriv.result = result;\n\t\tqueueMicrotask(() => {\n\t\t\tcallHandlers.call(this, priv.handlers);\n\t\t\tpriv.handlers = null;\n\t\t});\n\t},\n\n\tget result () { return this[privKey].result; },\n\n\tget state () { return this[privKey].state; },\n\n\tvalueOf () { return this; },\n\n}, Function.prototype);\nproto.finally = proto.always;\n\nfunction opInit (d) {\n\t// Initialize, and make this object JS/Mesgjs \"bilingual\"\n\t// (Note the alternate d.rr (vs d.js) architecture here)\n\tObject.setPrototypeOf(d.rr, proto);\n\tsetRO(d.rr, privKey, {\n\t\tstate: 'pending', result: undefined, handlers: [],\n\t});\n\tif (d.mp.has('resolve')) d.rr.resolve(d.mp.at('resolve'));\n\tif (d.mp.has('reject')) d.rr.reject(d.mp.at('reject'));\n}\n\nexport function install (name) {\n\tgetInterface(name).set({\n\t\tlock: true, pristine: true,\n\t\thandlers: {\n\t\t\t'@init': opInit,\n\t\t\t'@jsv': d => d.rr,\n\t\t\tall: d => d.rr.all(d.mp),\n\t\t\tallSettled: d => d.rr.allSettled(d.mp),\n\t\t\talways: d => d.rr.always(d.mp.at(0)),\n\t\t\tany: d => d.rr.any(d.mp),\n\t\t\tcatch: d => d.rr.catch(d.mp.at(0)),\n\t\t\tmessage: d => d.rr.result?.message,\n\t\t\trace: d => d.rr.race(d.mp),\n\t\t\treject: d => d.rr.reject(d.mp.at(0)),\n\t\t\tresolve: d => d.rr.resolve(d.mp.at(0)),\n\t\t\tresult: d => d.rr.result,\n\t\t\tstate: d => d.rr.state,\n\t\t\tthen: d => d.rr.then(d.mp.at(0), d.mp.at(1)),\n\t\t},\n\t});\n}\n\n// END\n"],
  "mappings": "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",
  "names": ["getInstance", "getInterface", "setRO", "NANOS", "identity", "x", "thrower", "callable", "f", "thenable", "o", "privKey", "dualStatus", "status", "arrayFrom", "value", "callHandlers", "list", "state", "result", "ok", "entry", "onResolve", "onReject", "next", "handler", "mt", "mp", "err", "proto", "promises", "results", "remaining", "p", "idx", "res", "reason", "reasons", "allRejected", "priv", "opInit", "d", "install", "name"]
}
