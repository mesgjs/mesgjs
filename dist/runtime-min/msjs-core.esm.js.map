{
  "version": 3,
  "sources": ["../../src/runtime/msjs-core.esm.js"],
  "sourcesContent": ["/*\n * Mesgjs @core Interface\n * Author: Brian Katzung <briank@kappacs.com>\n * Copyright 2025 by Kappa Computer Solutions, LLC and Brian Katzung\n */\n\nimport { debugConfig, fcheck, fready, fwait, getInstance, getInterface, getModMeta, logInterfaces, modHasCap, runIfCode, runWhileCode, setModMeta, setRO, typeAccepts, typeChains } from './runtime.esm.js';\nimport { NANOS, parseQJSON, parseSLID } from './vendor.esm.js';\n\n// (and value...)\n// And: false result if any not true, else last true result (default true)\nfunction opAnd (d) {\n\tconst { mp } = d;\n\tlet result = true;\n\tfor (const v of mp.values()) {\n\t\tresult = runIfCode(v);\n\t\tif (!result) return result;\n\t}\n\treturn result;\n}\n\n// (await {block!}... collect=@f)\nfunction opAwait (d) {\n\tconst { mp } = d, collect = mp.at('collect');\n\tlet result = collect ? new NANOS() : undefined;\n\tconst save = v => { if (collect) result.push(v); else result = v; };\n\tconst runBlocks = async () => {\n\t\tfor (const v of mp.values()) save(await runIfCode(v));\n\t};\n\tconst whenDone = getInstance('@promise');\n\trunBlocks().then(() => whenDone.resolve(result));\n\treturn whenDone;\n}\n\n// (case val cmp1 res1 ... cmpN resN else=default)\nfunction opCase (d) {\n\tconst { mp } = d, val = mp.at(0), type = val?.msjsType, stop = mp.next - 1;\n\tconst op = typeAccepts(type, 'caseEq') ? 'caseEq' : typeAccepts(type, 'eq') ? 'eq' : undefined, eq = op ? (to => val(op, to)) : (to => val === to);\n\tfor (let i = 1; i < stop; i += 2) if (eq(runIfCode(mp.at(i)))) return runIfCode(mp.at(i + 1));\n\treturn runIfCode(mp.at('else'));\n}\n\n// (get type init=params)\nfunction opGet (d) {\n\tconst { mp } = d;\n\treturn getInstance(mp.at(0), mp.at('init'));\n}\n\n// (if cond1 then1 cond2 then2 ... else=value)\nfunction opIf (d) {\n\tconst { mp } = d, end = mp.next - 1;\n\tfor (let i = 0; i < end; i += 2) if (runIfCode(mp.at(i))) return runIfCode(mp.at(i + 1));\n\t/*\n\t * Return the else value if provided; otherwise return the final\n\t * expression if there's an odd number of expressions.\n\t */\n\tif (mp.has('else')) return runIfCode(mp.at('else'));\n\tif (mp.next % 2) return runIfCode(mp.at(end));\n}\n\n// function opImport (d) {\n// }\n\n// (or value...)\n// Or: first true result, else last false result (default false)\nfunction opOr (d) {\n\tconst { mp } = d;\n\tlet result = false;\n\tfor (const v of mp.values()) {\n\t\tresult = runIfCode(v);\n\t\tif (result) return result;\n\t}\n\treturn result;\n}\n\n// (run {block!}... repeat=@f collect=@f)\nfunction opRun (d) {\n\tconst { mp } = d, collect = mp.at('collect');\n\tlet result = collect ? new NANOS() : undefined;\n\tconst save = v => { if (collect) result.push(v); else result = v; };\n\tif (mp.at('repeat')) for (const v of mp.values()) save(runWhileCode(v));\n\telse for (const v of mp.values()) save(runIfCode(v));\n\treturn result;\n}\n\n// (throw error)\nfunction opThrow (d) {\n\tconst { mp } = d, err = mp.at(0);\n\tthrow ((err instanceof Error) ? err : new Error(err));\n}\n\n// Returns true if exactly one value is true\nfunction opXor (d) {\n\tconst { mp } = d;\n\tlet result = false;\n\tfor (const v of mp.values()) {\n\t\tconst curRes = runIfCode(v);\n\t\tif (curRes) {\n\t\t\tif (result) return false;\n\t\t\tresult = curRes;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function install (name) {\n\tgetInterface(name).set({\n\t\tfinal: true, lock: true, pristine: true, singleton: true,\n\t\thandlers: {\n\t\t\t_: d => d.mp.at(0),\t\t\t// underscore (\"basically parentheses\")\n\t\t\t'&': opAnd,\n\t\t\t':': opCase,\n\t\t\t'+': opGet,\n\t\t\t'?': opIf,\n\t\t\t'~': d => !runIfCode(d.mp.at(0)),\t// not\n\t\t\t'|': opOr,\n\t\t\tand: opAnd,\n\t\t\tawait: opAwait,\n\t\t\tcase: opCase,\n\t\t\tdebug: d => debugConfig(d.mp),\n\t\t\tfcheck: d => fcheck(d.mp.at(0)),\n\t\t\tfwait: d => fwait(...d.mp.values()),\n\t\t\tfready: d => fready(d.mp.at('mid'), d.mp.at(0)),\n\t\t\tget: opGet,\t\t\t\t\t// Get instance\n\t\t\tif: opIf,\n\t\t\tinterface: d => getInterface(d.mp.at(0)),\n\t\t\tlog: d => console.log(...d.mp.values()),\n\t\t\tlogErr: d => console.error(...d.mp.values()),\n\t\t\tlogInterfaces,\n\t\t\tlogWarn: d => console.warn(...d.mp.values()),\n\t\t\tmodHasCap: d => modHasCap(d.mp.at(0), d.mp.at(1)),\n\t\t\tnot: d => !runIfCode(d.mp.at(0)),\n\t\t\tor: opOr,\n\t\t\tqjson: d => parseQJSON(d.mp.at(0, '')),\n\t\t\trun: opRun,\n\t\t\tslid: d => parseSLID(d.mp.at(0, '')),\n\t\t\tthrow: opThrow,\n\t\t\ttype: d => globalThis.$toMsjs(d.mp.at(0))?.msjsType,\n\t\t\ttypeAccepts: d => typeAccepts(d.mp.at(0), d.mp.at(1)),\n\t\t\ttypeChains: d => typeChains(d.mp.at(0), d.mp.at(1)),\n\t\t\txor: opXor,\n\t\t},\n\t\tcacheHints: {\n\t\t\t':': 'pin',\n\t\t\t'+': 'pin',\n\t\t\t'?': 'pin',\n\t\t\tcase: 'pin',\n\t\t\tget: 'pin',\n\t\t\tif: 'pin',\n\t\t},\n\t});\n\tif (name === '@core') {\n\t\tsetRO(globalThis, '$c', getInstance('@core'));\n\t\t// \"Re-export\" common runtime functions on $c to reduce imports\n\t\tObject.assign($c, {\n\t\t\tfcheck,\n\t\t\tfready,\n\t\t\tfwait,\n\t\t\tgetInstance,\n\t\t\tgetInterface,\n\t\t\tgetModMeta,\n\t\t\tmodHasCap,\n\t\t\trunIfCode,\n\t\t\trunWhileCode,\n\t\t\tsetModMeta,\n\t\t\tsetRO,\n\t\t\ttypeAccepts,\n\t\t\ttypeChains,\n\t\t});\n\t\t// BEST PRACTICE: Make $c immutable after loading in mesgjs.esm.js\n\t}\n}\n\n// END\n"],
  "mappings": "AAMA,OAAS,eAAAA,EAAa,UAAAC,EAAQ,UAAAC,EAAQ,SAAAC,EAAO,eAAAC,EAAa,gBAAAC,EAAc,cAAAC,EAAY,iBAAAC,EAAe,aAAAC,EAAW,aAAAC,EAAW,gBAAAC,EAAc,cAAAC,EAAY,SAAAC,EAAO,eAAAC,EAAa,cAAAC,MAAkB,mBACzL,OAAS,SAAAC,EAAO,cAAAC,EAAY,aAAAC,MAAiB,kBAI7C,SAASC,EAAOC,EAAG,CAClB,KAAM,CAAE,GAAAC,CAAG,EAAID,EACf,IAAIE,EAAS,GACb,UAAWC,KAAKF,EAAG,OAAO,EAEzB,GADAC,EAASZ,EAAUa,CAAC,EAChB,CAACD,EAAQ,OAAOA,EAErB,OAAOA,CACR,CAGA,SAASE,EAASJ,EAAG,CACpB,KAAM,CAAE,GAAAC,CAAG,EAAID,EAAGK,EAAUJ,EAAG,GAAG,SAAS,EAC3C,IAAIC,EAASG,EAAU,IAAIT,EAAU,OACrC,MAAMU,EAAOH,GAAK,CAAME,EAASH,EAAO,KAAKC,CAAC,EAAQD,EAASC,CAAG,EAC5DI,EAAY,SAAY,CAC7B,UAAWJ,KAAKF,EAAG,OAAO,EAAGK,EAAK,MAAMhB,EAAUa,CAAC,CAAC,CACrD,EACMK,EAAWvB,EAAY,UAAU,EACvC,OAAAsB,EAAU,EAAE,KAAK,IAAMC,EAAS,QAAQN,CAAM,CAAC,EACxCM,CACR,CAGA,SAASC,EAAQT,EAAG,CACnB,KAAM,CAAE,GAAAC,CAAG,EAAID,EAAGU,EAAMT,EAAG,GAAG,CAAC,EAAGU,EAAOD,GAAK,SAAUE,EAAOX,EAAG,KAAO,EACnEY,EAAKnB,EAAYiB,EAAM,QAAQ,EAAI,SAAWjB,EAAYiB,EAAM,IAAI,EAAI,KAAO,OAAWG,EAAKD,EAAME,GAAML,EAAIG,EAAIE,CAAE,EAAMA,GAAML,IAAQK,EAC/I,QAASC,EAAI,EAAGA,EAAIJ,EAAMI,GAAK,EAAG,GAAIF,EAAGxB,EAAUW,EAAG,GAAGe,CAAC,CAAC,CAAC,EAAG,OAAO1B,EAAUW,EAAG,GAAGe,EAAI,CAAC,CAAC,EAC5F,OAAO1B,EAAUW,EAAG,GAAG,MAAM,CAAC,CAC/B,CAGA,SAASgB,EAAOjB,EAAG,CAClB,KAAM,CAAE,GAAAC,CAAG,EAAID,EACf,OAAOf,EAAYgB,EAAG,GAAG,CAAC,EAAGA,EAAG,GAAG,MAAM,CAAC,CAC3C,CAGA,SAASiB,EAAMlB,EAAG,CACjB,KAAM,CAAE,GAAAC,CAAG,EAAID,EAAGmB,EAAMlB,EAAG,KAAO,EAClC,QAASe,EAAI,EAAGA,EAAIG,EAAKH,GAAK,EAAG,GAAI1B,EAAUW,EAAG,GAAGe,CAAC,CAAC,EAAG,OAAO1B,EAAUW,EAAG,GAAGe,EAAI,CAAC,CAAC,EAKvF,GAAIf,EAAG,IAAI,MAAM,EAAG,OAAOX,EAAUW,EAAG,GAAG,MAAM,CAAC,EAClD,GAAIA,EAAG,KAAO,EAAG,OAAOX,EAAUW,EAAG,GAAGkB,CAAG,CAAC,CAC7C,CAOA,SAASC,EAAMpB,EAAG,CACjB,KAAM,CAAE,GAAAC,CAAG,EAAID,EACf,IAAIE,EAAS,GACb,UAAWC,KAAKF,EAAG,OAAO,EAEzB,GADAC,EAASZ,EAAUa,CAAC,EAChBD,EAAQ,OAAOA,EAEpB,OAAOA,CACR,CAGA,SAASmB,EAAOrB,EAAG,CAClB,KAAM,CAAE,GAAAC,CAAG,EAAID,EAAGK,EAAUJ,EAAG,GAAG,SAAS,EAC3C,IAAIC,EAASG,EAAU,IAAIT,EAAU,OACrC,MAAMU,EAAOH,GAAK,CAAME,EAASH,EAAO,KAAKC,CAAC,EAAQD,EAASC,CAAG,EAClE,GAAIF,EAAG,GAAG,QAAQ,EAAG,UAAWE,KAAKF,EAAG,OAAO,EAAGK,EAAKf,EAAaY,CAAC,CAAC,MACjE,WAAWA,KAAKF,EAAG,OAAO,EAAGK,EAAKhB,EAAUa,CAAC,CAAC,EACnD,OAAOD,CACR,CAGA,SAASoB,EAAStB,EAAG,CACpB,KAAM,CAAE,GAAAC,CAAG,EAAID,EAAGuB,EAAMtB,EAAG,GAAG,CAAC,EAC/B,MAAQsB,aAAe,MAASA,EAAM,IAAI,MAAMA,CAAG,CACpD,CAGA,SAASC,EAAOxB,EAAG,CAClB,KAAM,CAAE,GAAAC,CAAG,EAAID,EACf,IAAIE,EAAS,GACb,UAAWC,KAAKF,EAAG,OAAO,EAAG,CAC5B,MAAMwB,EAASnC,EAAUa,CAAC,EAC1B,GAAIsB,EAAQ,CACX,GAAIvB,EAAQ,MAAO,GACnBA,EAASuB,CACV,CACD,CACA,OAAOvB,CACR,CAEO,SAASwB,EAASC,EAAM,CAC9BzC,EAAayC,CAAI,EAAE,IAAI,CACtB,MAAO,GAAM,KAAM,GAAM,SAAU,GAAM,UAAW,GACpD,SAAU,CACT,EAAG3B,GAAKA,EAAE,GAAG,GAAG,CAAC,EACjB,IAAKD,EACL,IAAKU,EACL,IAAKQ,EACL,IAAKC,EACL,IAAKlB,GAAK,CAACV,EAAUU,EAAE,GAAG,GAAG,CAAC,CAAC,EAC/B,IAAKoB,EACL,IAAKrB,EACL,MAAOK,EACP,KAAMK,EACN,MAAOT,GAAKnB,EAAYmB,EAAE,EAAE,EAC5B,OAAQA,GAAKlB,EAAOkB,EAAE,GAAG,GAAG,CAAC,CAAC,EAC9B,MAAOA,GAAKhB,EAAM,GAAGgB,EAAE,GAAG,OAAO,CAAC,EAClC,OAAQA,GAAKjB,EAAOiB,EAAE,GAAG,GAAG,KAAK,EAAGA,EAAE,GAAG,GAAG,CAAC,CAAC,EAC9C,IAAKiB,EACL,GAAIC,EACJ,UAAWlB,GAAKd,EAAac,EAAE,GAAG,GAAG,CAAC,CAAC,EACvC,IAAKA,GAAK,QAAQ,IAAI,GAAGA,EAAE,GAAG,OAAO,CAAC,EACtC,OAAQA,GAAK,QAAQ,MAAM,GAAGA,EAAE,GAAG,OAAO,CAAC,EAC3C,cAAAZ,EACA,QAASY,GAAK,QAAQ,KAAK,GAAGA,EAAE,GAAG,OAAO,CAAC,EAC3C,UAAWA,GAAKX,EAAUW,EAAE,GAAG,GAAG,CAAC,EAAGA,EAAE,GAAG,GAAG,CAAC,CAAC,EAChD,IAAKA,GAAK,CAACV,EAAUU,EAAE,GAAG,GAAG,CAAC,CAAC,EAC/B,GAAIoB,EACJ,MAAOpB,GAAKH,EAAWG,EAAE,GAAG,GAAG,EAAG,EAAE,CAAC,EACrC,IAAKqB,EACL,KAAMrB,GAAKF,EAAUE,EAAE,GAAG,GAAG,EAAG,EAAE,CAAC,EACnC,MAAOsB,EACP,KAAMtB,GAAK,WAAW,QAAQA,EAAE,GAAG,GAAG,CAAC,CAAC,GAAG,SAC3C,YAAaA,GAAKN,EAAYM,EAAE,GAAG,GAAG,CAAC,EAAGA,EAAE,GAAG,GAAG,CAAC,CAAC,EACpD,WAAYA,GAAKL,EAAWK,EAAE,GAAG,GAAG,CAAC,EAAGA,EAAE,GAAG,GAAG,CAAC,CAAC,EAClD,IAAKwB,CACN,EACA,WAAY,CACX,IAAK,MACL,IAAK,MACL,IAAK,MACL,KAAM,MACN,IAAK,MACL,GAAI,KACL,CACD,CAAC,EACGG,IAAS,UACZlC,EAAM,WAAY,KAAMR,EAAY,OAAO,CAAC,EAE5C,OAAO,OAAO,GAAI,CACjB,OAAAH,EACA,OAAAC,EACA,MAAAC,EACA,YAAAC,EACA,aAAAC,EACA,WAAAC,EACA,UAAAE,EACA,UAAAC,EACA,aAAAC,EACA,WAAAC,EACA,MAAAC,EACA,YAAAC,EACA,WAAAC,CACD,CAAC,EAGH",
  "names": ["debugConfig", "fcheck", "fready", "fwait", "getInstance", "getInterface", "getModMeta", "logInterfaces", "modHasCap", "runIfCode", "runWhileCode", "setModMeta", "setRO", "typeAccepts", "typeChains", "NANOS", "parseQJSON", "parseSLID", "opAnd", "d", "mp", "result", "v", "opAwait", "collect", "save", "runBlocks", "whenDone", "opCase", "val", "type", "stop", "op", "eq", "to", "i", "opGet", "opIf", "end", "opOr", "opRun", "opThrow", "err", "opXor", "curRes", "install", "name"]
}
