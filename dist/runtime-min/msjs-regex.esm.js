import{getInterface as i,setRO as o,throwFlow as u}from"./runtime.esm.js";const l=t=>t&&new NANOS(t,{groups:t.groups&&new NANOS(t.groups)});function h(t){const e=t.mp.at(0,""),s=e instanceof RegExp?e:new RegExp(e,t.mp.at(1,""));o(t.rr,"jsv",s),o(t.octx,"js",{re:s}),o(t.js,$c.symbols.instance,t.rr,!1)}function j(t){const{js:e,mp:s}=t,n=s.at("each"),m=s.at("else"),f=s.at("collect");delete e.capture,delete e.match,e.num=-1;let r=f?new NANOS:void 0;const c=a=>{f?r.push(a):r=a};e.active=!0;try{for(const a of s.at(0,"").matchAll(e.re))if(++e.num,n?.msjsType==="@code"){e.match=l(a);try{c(n("run"))}catch(p){if(!e.capture)throw p;if(e.hasFlowRes&&(c(e.flowRes),e.hasFlowRes=e.flowRes=!1),p.message==="stop")break;delete e.capture}}if(e.num<0&&m?.msjsType==="@code")try{c(m("run"))}catch(a){if(!e.capture)throw a;e.hasFlowRes&&(c(e.flowRes),e.hasFlowRes=e.flowRes=!1)}}finally{e.active=!1}return r}function x(){const t="@regex";i(t).set({lock:!0,pristine:!0,handlers:{"@init":h,"@jsv":e=>e.js.re,exec:e=>l(e.js.re.exec(e.mp.at(0,""))),flags:e=>e.js.re.flags,last:e=>e.js.re.lastIndex,match:e=>e.js.match,match1:e=>l(e.mp.at(0,"").match(e.js.re)),matchAll:j,next:e=>u(e,"next",t),num:e=>e.js.num,search:e=>e.mp.at(0,"").search(e.js.re),setLast:e=>(e.js.re.lastIndex=e.mp.at(0,0),e.rr),source:e=>e.js.re.source,stop:e=>u(e,"stop",t),test:e=>e.js.re.test(e.mp.at(0,""))}})}export{x as install};
