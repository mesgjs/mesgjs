{
  "version": 3,
  "sources": ["../../src/runtime/unified-list.esm.js"],
  "sourcesContent": ["/*\n * Mesgjs Unified List Interface\n *\n * A minimalist universal interface to support passing JS arrays, plain\n * objects, and other native JS values as message parameter lists with\n * consistent semantics. NANOS is the reference interface.\n *\n * Copyright 2025 by Kappa Computer Solutions, LLC and Brian Katzung\n * Author: Brian Katzung <briank@kappacs.com>\n */\n\nimport { NANOS, isIndex } from './vendor.esm.js';\n\nconst noKey = Symbol();\n\nclass Proxy {\n    constructor (list) {\n\tthis._list = list;\n    }\n\n    // Get value for key\n    at (k, def) {\n\tk = this.wrapIndex(k);\n\treturn Object.hasOwn(this._list, k) ? this._list[k] : def;\n    }\n\n    // Alias for at\n    get (k, def) { return this.at(k, def); }\n\n    // Return with a key is present\n    has (k) { return Object.hasOwn(this._list, this.wrapIndex(k)); }\n\n    // Return only the index entries\n    *indexEntries () {\n\tfor (const e of this.entries()) if (isIndex(e[0])) yield e;\n    }\n\n    // Return only the index keys\n    *indexes () { for (const k of this.keys()) if (isIndex(k)) yield k; }\n\n    // Return the size of the list (= # of keys)\n    get size () {\n\tif (this._size === undefined) this._size = Object.keys(this._list).length;\n\treturn this._size;\n    }\n\n    wrapIndex (k) {\n\tif (/^-[1-9]\\d*$/.test(k)) {\n\t    k = parseInt(k) + this.next;\n\t    if (k < 0) return noKey;\n\t}\n\treturn k;\n    }\n}\n\nclass ArrayProxy extends Proxy {\n    *entries () { for (const k of this.keys()) yield [ k, this._list[k] ]; }\n    indexEntries () { return this._list.entries(); }\n    keys () { return Object.keys(this._list).values(); }\n    get next () { return this._list.length; }\n    values () { return this._list.values(); }\n}\n\nclass ObjectProxy extends Proxy {\n    entries () { return Object.entries(this._list).values(); }\n    keys () { return Object.keys(this._list).values(); }\n    get next () {\n\tif (this._next === undefined) this._next = this.indexes().reduce((acc, cur) => Math.max(acc, cur), -1) + 1;\n\treturn this._next;\n    }\n    *values () {\t\t// NB: *indexed* values\n\tfor (let i = 0; i < this.next; ++i) yield this.at(i);\n    }\n}\n\nconst emptyList = new ArrayProxy([]);\n\nexport function unifiedList (list, promote) {\n    for (const type of [NANOS, ArrayProxy, ObjectProxy]) if (list instanceof type) return list;\n    if (Array.isArray(list)) return new ArrayProxy(list);\n    if (typeof list === 'object' && list !== null) return new ObjectProxy(list);\n    if (!promote) return list;\n    if (list === undefined) return emptyList;\n    return new ArrayProxy([ list ]);\n}\n\n// END\n"],
  "mappings": "AAWA,OAAS,SAAAA,EAAO,WAAAC,MAAe,kBAE/B,MAAMC,EAAQ,OAAO,EAErB,MAAMC,CAAM,CACR,YAAaC,EAAM,CACtB,KAAK,MAAQA,CACV,CAGA,GAAIC,EAAGC,EAAK,CACf,OAAAD,EAAI,KAAK,UAAUA,CAAC,EACb,OAAO,OAAO,KAAK,MAAOA,CAAC,EAAI,KAAK,MAAMA,CAAC,EAAIC,CACnD,CAGA,IAAKD,EAAGC,EAAK,CAAE,OAAO,KAAK,GAAGD,EAAGC,CAAG,CAAG,CAGvC,IAAKD,EAAG,CAAE,OAAO,OAAO,OAAO,KAAK,MAAO,KAAK,UAAUA,CAAC,CAAC,CAAG,CAG/D,CAAC,cAAgB,CACpB,UAAW,KAAK,KAAK,QAAQ,EAAOJ,EAAQ,EAAE,CAAC,CAAC,IAAG,MAAM,EACtD,CAGA,CAAC,SAAW,CAAE,UAAWI,KAAK,KAAK,KAAK,EAAOJ,EAAQI,CAAC,IAAG,MAAMA,EAAG,CAGpE,IAAI,MAAQ,CACf,OAAI,KAAK,QAAU,SAAW,KAAK,MAAQ,OAAO,KAAK,KAAK,KAAK,EAAE,QAC5D,KAAK,KACT,CAEA,UAAWA,EAAG,CACjB,MAAI,cAAc,KAAKA,CAAC,IACpBA,EAAI,SAASA,CAAC,EAAI,KAAK,KACnBA,EAAI,GAAUH,EAEfG,CACJ,CACJ,CAEA,MAAME,UAAmBJ,CAAM,CAC3B,CAAC,SAAW,CAAE,UAAWE,KAAK,KAAK,KAAK,EAAG,KAAM,CAAEA,EAAG,KAAK,MAAMA,CAAC,CAAE,CAAG,CACvE,cAAgB,CAAE,OAAO,KAAK,MAAM,QAAQ,CAAG,CAC/C,MAAQ,CAAE,OAAO,OAAO,KAAK,KAAK,KAAK,EAAE,OAAO,CAAG,CACnD,IAAI,MAAQ,CAAE,OAAO,KAAK,MAAM,MAAQ,CACxC,QAAU,CAAE,OAAO,KAAK,MAAM,OAAO,CAAG,CAC5C,CAEA,MAAMG,UAAoBL,CAAM,CAC5B,SAAW,CAAE,OAAO,OAAO,QAAQ,KAAK,KAAK,EAAE,OAAO,CAAG,CACzD,MAAQ,CAAE,OAAO,OAAO,KAAK,KAAK,KAAK,EAAE,OAAO,CAAG,CACnD,IAAI,MAAQ,CACf,OAAI,KAAK,QAAU,SAAW,KAAK,MAAQ,KAAK,QAAQ,EAAE,OAAO,CAACM,EAAKC,IAAQ,KAAK,IAAID,EAAKC,CAAG,EAAG,EAAE,EAAI,GAClG,KAAK,KACT,CACA,CAAC,QAAU,CACd,QAASC,EAAI,EAAGA,EAAI,KAAK,KAAM,EAAEA,EAAG,MAAM,KAAK,GAAGA,CAAC,CAChD,CACJ,CAEA,MAAMC,EAAY,IAAIL,EAAW,CAAC,CAAC,EAE5B,SAASM,EAAaT,EAAMU,EAAS,CACxC,UAAWC,IAAQ,CAACf,EAAOO,EAAYC,CAAW,EAAG,GAAIJ,aAAgBW,EAAM,OAAOX,EACtF,OAAI,MAAM,QAAQA,CAAI,EAAU,IAAIG,EAAWH,CAAI,EAC/C,OAAOA,GAAS,UAAYA,IAAS,KAAa,IAAII,EAAYJ,CAAI,EACrEU,EACDV,IAAS,OAAkBQ,EACxB,IAAIL,EAAW,CAAEH,CAAK,CAAC,EAFTA,CAGzB",
  "names": ["NANOS", "isIndex", "noKey", "Proxy", "list", "k", "def", "ArrayProxy", "ObjectProxy", "acc", "cur", "i", "emptyList", "unifiedList", "promote", "type"]
}
