{
  "version": 3,
  "sources": ["../../src/runtime/msjs-promise.esm.js"],
  "sourcesContent": ["/*\n * Mesgjs @promise interface\n * (Implements Promise-like API, but is NOT a JS Promise wrapper interface)\n *\n * Authors: Brian Katzung <briank@kappacs.com> and ChatGPT\n * Copyright 2025 by Kappa Computer Solutions, LLC and Brian Katzung\n */\n\n/*\nCan reject in the original promise task, but queues the handler call (it\ndoesn't require the handler yet).\nIt returns.\nHandlers can be added in a chain after the new Promise.\nIn the reject dispatch, checks for no reject handler.\n*/\n\nimport { getInstance, getInterface, setRO } from './runtime.esm.js';\nimport { NANOS } from './vendor.esm.js';\n\nconst identity = x => x, thrower = x => { throw x; };\nconst callable = f => typeof f === 'function' && (!f.msjsType || f.msjsType === '@code' || f.msjsType === '@function');\nconst thenable = o => typeof o?.then === 'function';\nconst privKey = Symbol();\nconst dualStatus = status => Object.assign(new NANOS(status), status);\n\nfunction arrayFrom (value) {\n    // Pass arrays through as-is\n    if (Array.isArray(value)) {\n\treturn value;\n    }\n    // Flatten iterables and generators\n    if (typeof value?.[Symbol.iterator] === 'function' || typeof value?.next === 'function') {\n\treturn Array.from(value);\n    }\n    // Flatten objects with a values method\n    if (typeof value?.values === 'function') {\n\treturn [...value.values()];\n    }\n}\n\nfunction callHandlers (list) {\n    const { state, result } = this[privKey], ok = state === 'fulfilled';\n    if (!ok && !list.length) {\n\tqueueMicrotask(() => Promise.reject(result));\n\treturn;\n    }\n    for (const entry of list) {\n\tconst [ onResolve, onReject, next ] = entry;\n\tqueueMicrotask(() => {\n\t    try {\n\t\tconst handler = ok ? onResolve : onReject, mt = handler.msjsType;\n\t\tif (mt) {\n\t\t    const mp = ok ? { state, resolve: result } : { state, reject: result, message: result?.message };\n\t\t    // Note: @function(call) can see the message params; @code(run) cannot!\n\t\t    next.resolve(handler((mt === '@code') ? 'run' : 'call', mp));\n\t\t}\n\t\telse next.resolve(handler(result));\n\t    } catch (err) {\n\t\tnext.reject(err);\n\t    }\n\t});\n    }\n}\n\nconst proto = Object.setPrototypeOf({\n    // Resolve all of a set of promises with an array of their results\n    all (promises, toList = false) {\n\tif (this[privKey].state !== 'pending') return;\n        this[privKey].toList = toList;\n\tpromises = arrayFrom(promises);\n\tif (!Array.isArray(promises)) {\n\t    throw new TypeError('@promise(all) requires an iterable of promises');\n\t}\n\tconst results = [];\n\tlet remaining = promises.length;\n\n\tif (!remaining) this.resolve(results);\n\tpromises.forEach((p, idx) => {\n\t    p.then(res => {\n\t\tresults[idx] = res;\n\t\tif (--remaining === 0) this.resolve(results);\n\t    }, err => this.reject(err));\n\t});\n\treturn this;\n    },\n\n    allSettled (promises, toList = false) {\n\tif (this[privKey].state !== 'pending') return;\n        this[privKey].toList = toList;\n\tpromises = arrayFrom(promises);\n\tif (!Array.isArray(promises)) {\n\t    throw new TypeError('@promise(allSettled) requires an iterable of promises');\n\t}\n\tconst results = [];\n\tlet remaining = promises.length;\n\n\tif (!remaining) this.resolve(results);\n\tpromises.forEach((p, idx) => {\n\t    p.then(value => {\n\t\tresults[idx] = dualStatus({ status: 'fulfilled', value });\n\t\tif (--remaining === 0) this.resolve(results);\n\t    }, reason => {\n\t\tresults[idx] = dualStatus({ status: 'rejected', reason });\n\t\tif (--remaining === 0) this.resolve(results);\n\t    });\n\t});\n\treturn this;\n    },\n\n    always (handler) { return this.then(handler, handler); },\n\n    any (promises) {\n\tif (this[privKey].state !== 'pending') return;\n\tpromises = arrayFrom(promises);\n\tif (!Array.isArray(promises)) {\n\t    throw new TypeError('@promise(any) requires an iterable of promises');\n\t}\n\tconst reasons = [];\n\tlet remaining = promises.length;\n\tconst allRejected = () => this.reject(new AggregateError(reasons, 'All promises were rejected'));\n\n\tif (!remaining) allRejected();\n\tpromises.forEach((p, idx) => {\n\t    p.then(res => this.resolve(res), reason => {\n\t\treasons[idx] = reason;\n\t\tif (--remaining === 0) allRejected();\n\t    });\n\t});\n\treturn this;\n    },\n\n    catch (onReject) { return this.then(null, onReject); },\n\n    then (onResolve, onReject) {\n\tconst priv = this[privKey];\n\tif (!callable(onResolve)) onResolve = identity;\n\tif (!callable(onReject)) onReject = thrower;\n\tconst entry = [ onResolve, onReject, getInstance('@promise') ];\n\tif (priv.handlers) priv.handlers.push(entry);\n\telse queueMicrotask(() => callHandlers.call(this, [ entry ]));\n\treturn entry[2];\n    },\n\n    race (promises) {\n\tif (this[privKey].state !== 'pending') return;\n\tpromises = arrayFrom(promises);\n\tif (!Array.isArray(promises)) {\n\t    throw new TypeError('@promise(race) requires an iterable of promises');\n\t}\n\tpromises.forEach(p => p.then(res => this.resolve(res), err => this.reject(err)));\n\treturn this;\n    },\n\n    reject (reason) {\n\tconst priv = this[privKey];\n\tif (priv.state !== 'pending') return;\n\tpriv.state = 'rejected';\n\tif (!(reason instanceof Error)) reason = new Error(reason);\n\tpriv.result = reason;\n\tqueueMicrotask(() => {\n\t    callHandlers.call(this, priv.handlers);\n\t    priv.handlers = null;\n\t});\n    },\n\n    resolve (result) {\n\tconst priv = this[privKey];\n\tif (priv.state !== 'pending') return;\n\tif (thenable(result)) {\n\t    result.then(res => this.resolve(res), err => this.reject(err));\n\t    return;\n\t}\n\tpriv.state = 'fulfilled';\n\tpriv.result = (priv.toList && Array.isArray(result)) ? new NANOS(result) : result;\n\tqueueMicrotask(() => {\n\t    callHandlers.call(this, priv.handlers);\n\t    priv.handlers = null;\n\t});\n    },\n\n    get result () { return this[privKey].result; },\n\n    get state () { return this[privKey].state; },\n\n}, Object.getPrototypeOf(Function));\nproto.finally = proto.always;\n\nfunction opInit (d) {\n    // Initialize, and make this object JS/Mesgjs \"bilingual\"\n    Object.setPrototypeOf(d.rr, proto);\n    setRO(d.rr, privKey, {\n\tstate: 'pending', result: undefined, handlers: [],\n    });\n    if (d.mp.has('resolve')) d.rr.resolve(d.mp.at('resolve'));\n    if (d.mp.has('reject')) d.rr.reject(d.mp.at('reject'));\n}\n\nexport function install (name) {\n    getInterface(name).set({\n\tlock: true, pristine: true,\n\thandlers: {\n\t    '@init': opInit,\n\t    all: d => d.rr.all(d.mp, true), // all - Mesgjs (NANOS) style\n\t    allSettled: d => d.rr.allSettled(d.mp, true), // allSettled - Mesgjs (NANOS) style\n\t    always: d => d.rr.always(d.mp.at(0)),\n\t    any: d => d.rr.any(d.mp),\n\t    catch: d => d.rr.catch(d.mp.at(0)),\n\t    message: d => d.rr.result?.message,\n\t    race: d => d.rr.race(d.mp),\n\t    reject: d => d.rr.reject(d.mp.at(0)),\n\t    resolve: d => d.rr.resolve(d.mp.at(0)),\n\t    result: d => d.rr.result,\n\t    state: d => d.rr.state,\n\t    then: d => d.rr.then(d.mp.at(0), d.mp.at(1)),\n\t},\n    });\n}\n\n// END\n"],
  "mappings": "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",
  "names": ["getInstance", "getInterface", "setRO", "NANOS", "identity", "x", "thrower", "callable", "f", "thenable", "o", "privKey", "dualStatus", "status", "arrayFrom", "value", "callHandlers", "list", "state", "result", "ok", "entry", "onResolve", "onReject", "next", "handler", "mt", "mp", "err", "proto", "promises", "toList", "results", "remaining", "p", "idx", "res", "reason", "reasons", "allRejected", "priv", "opInit", "d", "install", "name"]
}
